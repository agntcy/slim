# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from enum import Enum, auto

class PyAgentType:
    r"""
    agent class
    """
    organization: builtins.str
    namespace: builtins.str
    agent_type: builtins.str
    def __new__(cls,agent_org:builtins.str, agent_ns:builtins.str, agent_class:builtins.str): ...

class PyKey:
    algorithm: PyAlgorithm
    format: PyKeyFormat
    key: PyKeyData
    def __new__(cls,algorithm:PyAlgorithm, format:PyKeyFormat, key:PyKeyData): ...

class PyService:
    id: builtins.int

class PySessionInfo:
    id: builtins.int
    def __new__(cls,session_id:builtins.int): ...

class PyAlgorithm(Enum):
    HS256 = auto()
    HS384 = auto()
    HS512 = auto()
    RS256 = auto()
    RS384 = auto()
    RS512 = auto()
    PS256 = auto()
    PS384 = auto()
    PS512 = auto()
    ES256 = auto()
    ES384 = auto()
    EdDSA = auto()

class PyIdentityProvider(Enum):
    StaticJwt = auto()
    Jwt = auto()
    SharedSecret = auto()

class PyIdentityVerifier(Enum):
    Jwt = auto()
    SharedSecret = auto()

class PyKeyData(Enum):
    File = auto()
    Content = auto()

class PyKeyFormat(Enum):
    Pem = auto()
    Jwk = auto()

class PySessionConfiguration(Enum):
    FireAndForget = auto()
    Streaming = auto()

class PySessionDirection(Enum):
    r"""
    session direction
    """
    SENDER = auto()
    RECEIVER = auto()
    BIDIRECTIONAL = auto()

class PySessionType(Enum):
    r"""
    session type
    """
    FIRE_AND_FORGET = auto()
    STREAMING = auto()

def connect(svc:PyService, config:dict) -> typing.Any:
    ...

def create_pyservice(organization:builtins.str, namespace:builtins.str, agent_type:builtins.str, provider:PyIdentityProvider, verifier:PyIdentityVerifier) -> typing.Any:
    ...

def create_session(svc:PyService, config:PySessionConfiguration) -> typing.Any:
    ...

def delete_session(svc:PyService, session_id:builtins.int) -> typing.Any:
    ...

def disconnect(svc:PyService, conn:builtins.int) -> typing.Any:
    ...

def get_default_session_config(svc:PyService, session_type:PySessionType) -> typing.Any:
    ...

def get_session_config(svc:PyService, session_id:builtins.int) -> typing.Any:
    ...

def init_tracing(config:dict) -> typing.Any:
    ...

def invite(svc:PyService, session_info:PySessionInfo, name:PyAgentType) -> typing.Any:
    ...

def publish(svc:PyService, session_info:PySessionInfo, fanout:builtins.int, blob:typing.Sequence[builtins.int], name:typing.Optional[PyAgentType]=None, id:typing.Optional[builtins.int]=None) -> typing.Any:
    ...

def receive(svc:PyService) -> typing.Any:
    ...

def remove(svc:PyService, session_info:PySessionInfo, name:PyAgentType, id:builtins.int) -> typing.Any:
    ...

def remove_route(svc:PyService, conn:builtins.int, name:PyAgentType, id:typing.Optional[builtins.int]=None) -> typing.Any:
    ...

def run_server(svc:PyService, config:dict) -> typing.Any:
    ...

def set_default_session_config(svc:PyService, config:PySessionConfiguration) -> typing.Any:
    ...

def set_route(svc:PyService, conn:builtins.int, name:PyAgentType, id:typing.Optional[builtins.int]=None) -> typing.Any:
    ...

def set_session_config(svc:PyService, session_id:builtins.int, config:PySessionConfiguration) -> typing.Any:
    ...

def stop_server(svc:PyService, endpoint:builtins.str) -> typing.Any:
    ...

def subscribe(svc:PyService, conn:builtins.int, name:PyAgentType, id:typing.Optional[builtins.int]=None) -> typing.Any:
    ...

def unsubscribe(svc:PyService, conn:builtins.int, name:PyAgentType, id:typing.Optional[builtins.int]=None) -> typing.Any:
    ...


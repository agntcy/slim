// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.0
// source: controlplane/v1/controlplane.proto

package controlplanev1

import (
	context "context"
	v1 "github.com/agntcy/slim/control-plane/common/proto/controller/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ControlPlaneService_AddRoute_FullMethodName          = "/controlplane.proto.v1.ControlPlaneService/AddRoute"
	ControlPlaneService_DeleteRoute_FullMethodName       = "/controlplane.proto.v1.ControlPlaneService/DeleteRoute"
	ControlPlaneService_ListRoutes_FullMethodName        = "/controlplane.proto.v1.ControlPlaneService/ListRoutes"
	ControlPlaneService_ListConnections_FullMethodName   = "/controlplane.proto.v1.ControlPlaneService/ListConnections"
	ControlPlaneService_ListNodes_FullMethodName         = "/controlplane.proto.v1.ControlPlaneService/ListNodes"
	ControlPlaneService_CreateChannel_FullMethodName     = "/controlplane.proto.v1.ControlPlaneService/CreateChannel"
	ControlPlaneService_DeleteChannel_FullMethodName     = "/controlplane.proto.v1.ControlPlaneService/DeleteChannel"
	ControlPlaneService_AddParticipant_FullMethodName    = "/controlplane.proto.v1.ControlPlaneService/AddParticipant"
	ControlPlaneService_DeleteParticipant_FullMethodName = "/controlplane.proto.v1.ControlPlaneService/DeleteParticipant"
	ControlPlaneService_ListChannels_FullMethodName      = "/controlplane.proto.v1.ControlPlaneService/ListChannels"
	ControlPlaneService_ListParticipants_FullMethodName  = "/controlplane.proto.v1.ControlPlaneService/ListParticipants"
)

// ControlPlaneServiceClient is the client API for ControlPlaneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlPlaneServiceClient interface {
	AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*AddRouteResponse, error)
	DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error)
	ListRoutes(ctx context.Context, in *Node, opts ...grpc.CallOption) (*v1.SubscriptionListResponse, error)
	ListConnections(ctx context.Context, in *Node, opts ...grpc.CallOption) (*v1.ConnectionListResponse, error)
	ListNodes(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*NodeListResponse, error)
	// MLS group management
	CreateChannel(ctx context.Context, in *v1.CreateChannelRequest, opts ...grpc.CallOption) (*v1.CreateChannelResponse, error)
	DeleteChannel(ctx context.Context, in *v1.DeleteChannelRequest, opts ...grpc.CallOption) (*v1.Ack, error)
	AddParticipant(ctx context.Context, in *v1.AddParticipantRequest, opts ...grpc.CallOption) (*v1.Ack, error)
	DeleteParticipant(ctx context.Context, in *v1.DeleteParticipantRequest, opts ...grpc.CallOption) (*v1.Ack, error)
	ListChannels(ctx context.Context, in *v1.ListChannelsRequest, opts ...grpc.CallOption) (*v1.ListChannelsResponse, error)
	ListParticipants(ctx context.Context, in *v1.ListParticipantsRequest, opts ...grpc.CallOption) (*v1.ListParticipantsResponse, error)
}

type controlPlaneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlPlaneServiceClient(cc grpc.ClientConnInterface) ControlPlaneServiceClient {
	return &controlPlaneServiceClient{cc}
}

func (c *controlPlaneServiceClient) AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*AddRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRouteResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_AddRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRouteResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_DeleteRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) ListRoutes(ctx context.Context, in *Node, opts ...grpc.CallOption) (*v1.SubscriptionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.SubscriptionListResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_ListRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) ListConnections(ctx context.Context, in *Node, opts ...grpc.CallOption) (*v1.ConnectionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ConnectionListResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_ListConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) ListNodes(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*NodeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeListResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_ListNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) CreateChannel(ctx context.Context, in *v1.CreateChannelRequest, opts ...grpc.CallOption) (*v1.CreateChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CreateChannelResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_CreateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) DeleteChannel(ctx context.Context, in *v1.DeleteChannelRequest, opts ...grpc.CallOption) (*v1.Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Ack)
	err := c.cc.Invoke(ctx, ControlPlaneService_DeleteChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) AddParticipant(ctx context.Context, in *v1.AddParticipantRequest, opts ...grpc.CallOption) (*v1.Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Ack)
	err := c.cc.Invoke(ctx, ControlPlaneService_AddParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) DeleteParticipant(ctx context.Context, in *v1.DeleteParticipantRequest, opts ...grpc.CallOption) (*v1.Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Ack)
	err := c.cc.Invoke(ctx, ControlPlaneService_DeleteParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) ListChannels(ctx context.Context, in *v1.ListChannelsRequest, opts ...grpc.CallOption) (*v1.ListChannelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListChannelsResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_ListChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) ListParticipants(ctx context.Context, in *v1.ListParticipantsRequest, opts ...grpc.CallOption) (*v1.ListParticipantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListParticipantsResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_ListParticipants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlPlaneServiceServer is the server API for ControlPlaneService service.
// All implementations must embed UnimplementedControlPlaneServiceServer
// for forward compatibility
type ControlPlaneServiceServer interface {
	AddRoute(context.Context, *AddRouteRequest) (*AddRouteResponse, error)
	DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error)
	ListRoutes(context.Context, *Node) (*v1.SubscriptionListResponse, error)
	ListConnections(context.Context, *Node) (*v1.ConnectionListResponse, error)
	ListNodes(context.Context, *NodeListRequest) (*NodeListResponse, error)
	// MLS group management
	CreateChannel(context.Context, *v1.CreateChannelRequest) (*v1.CreateChannelResponse, error)
	DeleteChannel(context.Context, *v1.DeleteChannelRequest) (*v1.Ack, error)
	AddParticipant(context.Context, *v1.AddParticipantRequest) (*v1.Ack, error)
	DeleteParticipant(context.Context, *v1.DeleteParticipantRequest) (*v1.Ack, error)
	ListChannels(context.Context, *v1.ListChannelsRequest) (*v1.ListChannelsResponse, error)
	ListParticipants(context.Context, *v1.ListParticipantsRequest) (*v1.ListParticipantsResponse, error)
	mustEmbedUnimplementedControlPlaneServiceServer()
}

// UnimplementedControlPlaneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedControlPlaneServiceServer struct {
}

func (UnimplementedControlPlaneServiceServer) AddRoute(context.Context, *AddRouteRequest) (*AddRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (UnimplementedControlPlaneServiceServer) DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedControlPlaneServiceServer) ListRoutes(context.Context, *Node) (*v1.SubscriptionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedControlPlaneServiceServer) ListConnections(context.Context, *Node) (*v1.ConnectionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnections not implemented")
}
func (UnimplementedControlPlaneServiceServer) ListNodes(context.Context, *NodeListRequest) (*NodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedControlPlaneServiceServer) CreateChannel(context.Context, *v1.CreateChannelRequest) (*v1.CreateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedControlPlaneServiceServer) DeleteChannel(context.Context, *v1.DeleteChannelRequest) (*v1.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedControlPlaneServiceServer) AddParticipant(context.Context, *v1.AddParticipantRequest) (*v1.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddParticipant not implemented")
}
func (UnimplementedControlPlaneServiceServer) DeleteParticipant(context.Context, *v1.DeleteParticipantRequest) (*v1.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParticipant not implemented")
}
func (UnimplementedControlPlaneServiceServer) ListChannels(context.Context, *v1.ListChannelsRequest) (*v1.ListChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannels not implemented")
}
func (UnimplementedControlPlaneServiceServer) ListParticipants(context.Context, *v1.ListParticipantsRequest) (*v1.ListParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParticipants not implemented")
}
func (UnimplementedControlPlaneServiceServer) mustEmbedUnimplementedControlPlaneServiceServer() {}

// UnsafeControlPlaneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlPlaneServiceServer will
// result in compilation errors.
type UnsafeControlPlaneServiceServer interface {
	mustEmbedUnimplementedControlPlaneServiceServer()
}

func RegisterControlPlaneServiceServer(s grpc.ServiceRegistrar, srv ControlPlaneServiceServer) {
	s.RegisterService(&ControlPlaneService_ServiceDesc, srv)
}

func _ControlPlaneService_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_AddRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).AddRoute(ctx, req.(*AddRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_DeleteRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).DeleteRoute(ctx, req.(*DeleteRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_ListRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).ListRoutes(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_ListConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).ListConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_ListConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).ListConnections(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).ListNodes(ctx, req.(*NodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).CreateChannel(ctx, req.(*v1.CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).DeleteChannel(ctx, req.(*v1.DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_AddParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AddParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).AddParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_AddParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).AddParticipant(ctx, req.(*v1.AddParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_DeleteParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).DeleteParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_DeleteParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).DeleteParticipant(ctx, req.(*v1.DeleteParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_ListChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).ListChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_ListChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).ListChannels(ctx, req.(*v1.ListChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_ListParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).ListParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_ListParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).ListParticipants(ctx, req.(*v1.ListParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlPlaneService_ServiceDesc is the grpc.ServiceDesc for ControlPlaneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlPlaneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controlplane.proto.v1.ControlPlaneService",
	HandlerType: (*ControlPlaneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRoute",
			Handler:    _ControlPlaneService_AddRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _ControlPlaneService_DeleteRoute_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _ControlPlaneService_ListRoutes_Handler,
		},
		{
			MethodName: "ListConnections",
			Handler:    _ControlPlaneService_ListConnections_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _ControlPlaneService_ListNodes_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _ControlPlaneService_CreateChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _ControlPlaneService_DeleteChannel_Handler,
		},
		{
			MethodName: "AddParticipant",
			Handler:    _ControlPlaneService_AddParticipant_Handler,
		},
		{
			MethodName: "DeleteParticipant",
			Handler:    _ControlPlaneService_DeleteParticipant_Handler,
		},
		{
			MethodName: "ListChannels",
			Handler:    _ControlPlaneService_ListChannels_Handler,
		},
		{
			MethodName: "ListParticipants",
			Handler:    _ControlPlaneService_ListParticipants_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controlplane/v1/controlplane.proto",
}

# Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0

---
name: rust-build-and-test
on:
  workflow_call:
    inputs:
      runner:
        description: Github hosted runner or Self hosted runner
        required: false
        type: string
        default: ubuntu-latest
      continue-on-error:
        description: Whether to skip the status update for this job
        required: false
        type: boolean
        default: false
      rust-toolchain:
        description: Toolchain to use
        required: false
        type: string
        default: stable
      rust-lint:
        description: Whether to run "task lint"
        required: false
        type: boolean
        default: true
      rust-vuln:
        description: Whether to run "task vuln"
        required: false
        type: boolean
        default: true
      rust-test:
        description: Whether to run "task test"
        required: false
        type: boolean
        default: true
      rust-test-coverage:
        description: Whether to run "task coverage"
        required: false
        type: boolean
        default: true
      rust-cross-build:
        description: Whether to run "task build"
        required: false
        type: boolean
        default: true
      working-directory:
        description: Directory to run the task in
        required: false
        type: string
        default: .
      task-prefix:
        description: "Prefix to use for task commands data-plane or mcp-proxy"
        type: string
        default: data-plane

jobs:
  setup-environment:
    runs-on: ${{ inputs.runner }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust

      - name: Get components hash
        id: get_hash
        run: |
          COMPONENTS_HASH=$(task ${{ inputs.task-prefix }}:tools:hash)
          echo "components_hash=$COMPONENTS_HASH" >> $GITHUB_OUTPUT

      - name: Setup Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ inputs.working-directory }}
          cache-on-failure: false
          shared-key: ${{runner.os}}-rust-${{hashFiles('**/Cargo.lock')}}-${{ steps.get_hash.outputs.components_hash }}

      - name: Install dependencies
        run: |
          task ${{ inputs.task-prefix }}:fetch
          task ${{ inputs.task-prefix }}:tools:fetch

  lint:
    runs-on: ${{ inputs.runner }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    if: ${{ inputs.rust-lint }}
    needs: [setup-environment]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust

      - name: Get components hash
        id: get_hash
        run: |
          COMPONENTS_HASH=$(task ${{ inputs.task-prefix }}:tools:hash)
          echo "components_hash=$COMPONENTS_HASH" >> $GITHUB_OUTPUT

      - name: Setup Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ inputs.working-directory }}
          cache-on-failure: false
          shared-key: ${{runner.os}}-rust-${{hashFiles('**/Cargo.lock')}}-${{ steps.get_hash.outputs.components_hash }}

      - name: Setup Python
        uses: ./.github/actions/setup-python
        with:
          py-install: false
          py-version: 3.x
          uv-install: true
          poetry-install: false

      - name: lint
        run: |
          task ${{ inputs.task-prefix }}:lint

  rustvulncheck:
    runs-on: ${{ inputs.runner }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    if: ${{ inputs.rust-vuln }}
    needs: [setup-environment]
    timeout-minutes: 30
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: ./.github/actions/setup-rust

      - name: Get components hash
        id: get_hash
        run: |
          COMPONENTS_HASH=$(task ${{ inputs.task-prefix }}:tools:hash)
          echo "components_hash=$COMPONENTS_HASH" >> $GITHUB_OUTPUT

      - name: Setup Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ inputs.working-directory }}
          cache-on-failure: false
          shared-key: ${{runner.os}}-rust-${{hashFiles('**/Cargo.lock')}}-${{ steps.get_hash.outputs.components_hash }}

      - name: Run `vuln`
        run: |
          task ${{ inputs.task-prefix }}:vuln

  test-coverage:
    runs-on: ${{ inputs.runner }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    if: ${{ inputs.rust-test-coverage }}
    needs: [setup-environment]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: ./.github/actions/setup-rust

      - name: Get components hash
        id: get_hash
        run: |
          COMPONENTS_HASH=$(task ${{ inputs.task-prefix }}:tools:hash)
          echo "components_hash=$COMPONENTS_HASH" >> $GITHUB_OUTPUT

      - name: Setup Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ inputs.working-directory }}
          cache-on-failure: false
          shared-key: ${{runner.os}}-rust-${{hashFiles('**/Cargo.lock')}}-${{ steps.get_hash.outputs.components_hash }}

      - name: Run `coverage`
        run: |
          task ${{ inputs.task-prefix }}:test:coverage

  unittest-matrix:
    runs-on: ${{ inputs.runner }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    if: ${{ inputs.rust-test }}
    needs: [setup-environment]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: ./.github/actions/setup-rust

      - name: Get components hash
        id: get_hash
        run: |
          COMPONENTS_HASH=$(task ${{ inputs.task-prefix }}:tools:hash)
          echo "components_hash=$COMPONENTS_HASH" >> $GITHUB_OUTPUT

      - name: Setup Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ inputs.working-directory }}
          cache-on-failure: false
          shared-key: ${{runner.os}}-rust-${{hashFiles('**/Cargo.lock')}}-${{ steps.get_hash.outputs.components_hash }}

      - name: Setup Python
        uses: ./.github/actions/setup-python
        with:
          py-install: true
          py-version: 3.13
          uv-install: true
          poetry-install: false

      - name: Run Unit Tests
        run: |
          task ${{ inputs.task-prefix }}:test

  unittest:
    runs-on: ${{ inputs.runner }}

    if: ${{ inputs.rust-test }}

    needs: [setup-environment, unittest-matrix]
    steps:
      - name: Print result
        run: echo ${{ needs.unittest-matrix.result }}
      - name: Interpret result
        run: |
          if [[ success == ${{ needs.unittest-matrix.result }} ]]
          then
            echo "All matrix jobs passed!"
          else
            echo "One or more matrix jobs failed."
            false
          fi

  cross-build:
    runs-on: ${{ inputs.runner }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    needs: [setup-environment]

    if: ${{ inputs.rust-cross-build }}

    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [linux]
        profile: [release, debug]
        arch: [aarch64, x86_64]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: ./.github/actions/setup-rust

      - name: Get components hash
        id: get_hash
        run: |
          COMPONENTS_HASH=$(task ${{ inputs.task-prefix }}:tools:hash)
          echo "components_hash=$COMPONENTS_HASH" >> $GITHUB_OUTPUT

      - name: Setup Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ inputs.working-directory }}
          cache-on-failure: false
          shared-key: ${{runner.os}}-rust-${{hashFiles('**/Cargo.lock')}}-${{ steps.get_hash.outputs.components_hash }}

      - name: Build
        run: |
          task ${{ inputs.task-prefix }}:build TARGET=${{matrix.arch}}-unknown-${{ matrix.os }}-gnu PROFILE=${{ matrix.profile }}

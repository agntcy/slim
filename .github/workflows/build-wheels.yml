name: Build and Publish Wheels

on:
  # Trigger on new releases
  release:
    types: [published]
  
  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      publish_to_pypi:
        description: 'Publish to PyPI (production)'
        required: false
        default: 'false'
      publish_to_testpypi:
        description: 'Publish to TestPyPI (testing)'
        required: false
        default: 'true'

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }} for Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]  # macos-13=x64, macos-14=ARM
        python-version: ["3.12", "3.13"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install Maturin
        run: pip install maturin
      
      - name: Build wheel
        working-directory: data-plane/python/bindings
        run: maturin build --release --out dist
      
      - name: Test wheel installation
        run: |
          pip install --find-links data-plane/python/bindings/dist slim-bindings --force-reinstall
          python -c "import slim_bindings; print('slim-bindings imported successfully')"
      
      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: data-plane/python/bindings/dist/*.whl
          retention-days: 30

  combine-wheels:
    name: Combine all wheels
    needs: build-wheels
    runs-on: ubuntu-latest
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: all-wheels
          merge-multiple: true
      
      - name: List all wheels
        run: ls -lh all-wheels/
      
      - name: Upload combined wheels
        uses: actions/upload-artifact@v4
        with:
          name: all-wheels
          path: all-wheels/*.whl
          retention-days: 90

  publish-testpypi:
    name: Publish to TestPyPI
    needs: combine-wheels
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.publish_to_testpypi == 'true'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/slim-bindings
    permissions:
      id-token: write
    
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          name: all-wheels
          path: dist
      
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true

  publish-pypi:
    name: Publish to PyPI
    needs: combine-wheels
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'release' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true')
    environment:
      name: pypi
      url: https://pypi.org/p/slim-bindings
    permissions:
      id-token: write
    
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          name: all-wheels
          path: dist
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true

  summary:
    name: Build Summary
    needs: [build-wheels, combine-wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          name: all-wheels
          path: wheels
      
      - name: Generate summary
        run: |
          echo "## 📦 Wheel Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Built Wheels" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Wheel | Size | Platform |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|------|----------|" >> $GITHUB_STEP_SUMMARY
          
          for wheel in wheels/*.whl; do
            filename=$(basename "$wheel")
            size=$(du -h "$wheel" | cut -f1)
            
            if [[ $filename == *"win_amd64"* ]]; then
              platform="Windows x64"
            elif [[ $filename == *"manylinux"* ]]; then
              platform="Linux x64"
            elif [[ $filename == *"macosx"*"x86_64"* ]]; then
              platform="macOS x64"
            elif [[ $filename == *"macosx"*"arm64"* ]]; then
              platform="macOS ARM64"
            else
              platform="Unknown"
            fi
            
            echo "| \`$filename\` | $size | $platform |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "✅ Wheels will be automatically published to PyPI" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️  Manual trigger - wheels available as artifacts" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To publish:" >> $GITHUB_STEP_SUMMARY
            echo "1. Test on TestPyPI: Re-run workflow with 'Publish to TestPyPI' enabled" >> $GITHUB_STEP_SUMMARY
            echo "2. Verify installation: \`pip install -i https://test.pypi.org/simple/ slim-bindings\`" >> $GITHUB_STEP_SUMMARY
            echo "3. Publish to PyPI: Create a GitHub release or re-run with 'Publish to PyPI' enabled" >> $GITHUB_STEP_SUMMARY
          fi
